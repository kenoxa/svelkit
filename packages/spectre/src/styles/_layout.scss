/**
 * Source: https://github.com/picturepan2/spectre/blob/0.5.10/src/_layout.scss
 */

// Layout
.container {
  // composes: container from global;
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  padding-left: $layout-spacing;
  padding-right: $layout-spacing;
  width: 100%;

  $grid-spacing: ($layout-spacing / ($layout-spacing * 0 + 1)) * $html-font-size;

  @each $breakpoint, $size in $sizes {
    &.grid-#{$breakpoint} {
      max-width: $grid-spacing * 2 + $size;
    }
  }
}

// Responsive breakpoint system
@each $breakpoint in $breakpoints {
  .grid-#{$breakpoint} {
    // composes: grid-#{$breakpoint} from global;
  }
  .show-#{$breakpoint} {
    // composes: show-#{$breakpoint} from global;
    display: none !important;
  }
  .hide-#{$breakpoint} {
    // composes: hide-#{$breakpoint} from global;
  }
}

// Responsive grid system
.columns {
  // composes: columns from global;
  box-sizing: border-box;
  display: flex;
  flex: 0 1 100%;
  flex-wrap: wrap;
  // Instead of .col-gapless, we'll use .gap-<-12>
  // margin-left: -$layout-spacing;
  // margin-right: -$layout-spacing;

  // &.col-gapless {
  //   margin-left: 0;
  //   margin-right: 0;

  //   & > .column {
  //     padding: 0;
  //   }
  // }
  &.col-oneline {
    flex-wrap: nowrap;
    overflow-x: auto;
  }
}

// .col-gapless {
//   // composes: col-gapless from global;
// }
.col-oneline {
  // composes: col-oneline from global;
}
.column {
  // composes: column from global;
}

/* [class~="col-"] => not needed as we add the column class to each col-* */
.column {
  box-sizing: border-box;
  display: flex;
  flex: 1;
  max-width: 100%;
  padding: $layout-spacing;

  @each $column in $columns {
    &.col-#{$column} {
      flex: none;
    }
  }
  &.col-auto {
    flex: none;
  }
}

@each $column in $columns {
  .col-#{$column} {
    // composes: col-#{$column} from global;
    width: ($column / length($columns) * 100%);
  }
}
.col-auto {
  // composes: col-auto from global;
  flex: 0 0 auto;
  max-width: none;
  width: auto;
}

// column offset
.col-mx-auto {
  // composes: col-mx-auto from global;
  margin-left: auto;
  margin-right: auto;
}
.col-ml-auto {
  // composes: col-ml-auto from global;
  margin-left: auto;
}
.col-mr-auto {
  // composes: col-mr-auto from global;
  margin-right: auto;
}

// gap
@each $gap in $columns {

    .col-gap-#{$gap},
    .col-gap-around-#{$gap} {
      width: calc(100% + #{$layout-spacing} * #{$gap});
      margin-top: calc(-#{$layout-spacing} * #{$gap});
      margin-left: calc(-#{$layout-spacing} * #{$gap});

      > * {
        margin-top: calc(#{$layout-spacing} * #{$gap});
        margin-left: calc(#{$layout-spacing} * #{$gap});
        @each $column in $columns{
          &.col-#{$column} {
            width: calc(#{$column} / #{length($columns)} * 100% - (#{$layout-spacing} * #{$gap}));
          }
        }
      }
    }
    .col-gap-around-#{$gap} {
      padding: calc(#{$layout-spacing} * #{$gap});
    }

}

@each $breakpoint, $size in $sizes {
  @media (max-width: $size) {
    @each $column in $columns {
      .col-#{$breakpoint}-#{$column} {
        flex: none;
      }
    }
    .col-#{$breakpoint}-auto {
      flex: none;
    }

    // column
    @each $column in $columns {
      .col-#{$breakpoint}-#{$column} {
        width: ($column / length($columns) * 100%);
      }
    }
    .col-#{$breakpoint}-auto {
      flex: 0 0 auto;
    }

    .hide-#{$breakpoint} {
      display: none !important;
    }
    .show-#{$breakpoint} {
      display: block !important;
    }

    @each $column in $columns {
      .col-#{$breakpoint}-#{$column} {
        // composes: col-#{$breakpoint}-#{$column} from global;
      }
    }

    .col-#{$breakpoint}-auto {
      // composes: col-#{$breakpoint}-auto from global;
    }

    // gaps
    @each $gap in $columns {
      .col-gap-#{$gap},
      .col-gap-around-#{$gap} {
        > * {
          @each $column in $columns {
            &.col-#{$breakpoint}-#{$column} {
              width: calc(#{$column} / #{length($columns)} * 100% - (#{$layout-spacing} * #{$gap}));
            }
          }
        }
      }
    }
  }
}
